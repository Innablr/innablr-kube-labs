# ConfigMap

ConfigMap's provide a way to separate config values from the deployment manifest.

For example we can create ConfigMap containing our sampleapp's MESSAGE.

```console
kubectl create configmap -h
kubectl create configmap sampleapp-config --from-literal "msg=Hello from ConfigMap"
configmap/sampleapp-config created
```

Let's also look at what that configmap manifest would look like using `--dry-run`

```console
$ kubectl create configmap sampleapp-config --from-literal "msg=Hello from ConfigMap" --dry-run -o yaml
apiVersion: v1
data:
  msg: Hello from ConfigMap
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: sampleapp-config
```

or simply:

```YAML
apiVersion: v1
kind: ConfigMap
metadata:
  name: sampleapp-config
data:
  msg: Hello from ConfigMap
```

# Create a Deployment to utilise the ConfigMap

Create a file called `myconfigmapdeployment.yaml` with:

```YAML
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myconfigmapdeployment
  labels:
    app: myconfigmapdeployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myconfigmapdeployment
  template:
    metadata:
      labels:
        app: myconfigmapdeployment
    spec:
      containers:
      - name: sampleapp
        image: public.ecr.aws/p9b0l7y4/eduk8s-sampleapp
        env:
        - name: MESSAGE
          valueFrom:
            configMapKeyRef:
              name: sampleapp-config   # The name of our ConfigMap above
              key: msg                 # The key used in the ConfigMap
```

Here, in the `env:` section of the template, we use the `valueFrom:` option, 
instead of directly providing `value: My message` as before.

And schedule this deployment as before using:

```console
$ kubectl apply -f myconfigmapdeployment.yaml
deployment.apps/myconfigmapdeployment created
```

# Secrets

Imagine now that our app displays a "secret" message. We can put the message in
a Kubernetes Secret instead.

Creating a Secret is similar to creating a ConfigMap.

```console
$ kubectl create secret generic sampleapp-secret --from-literal "MESSAGE=Hello from Secret" --dry-run -o yaml

secret/sampleapp-secret created
```

And the Deployment/Pod template can get reference a Secret much like the 
ConfigMap.

Instead of `configMapKeyRef:`, use `secretKeyRef:`, like so:

```YAML
        env:
        - name: MESSAGE
          valueFrom:
            secretKeyRef:
              name: sampleapp-secret   # The name of our Secret above
              key: MESSAGE             # The key used when creating the Secret
```

The `kubectl create secret` command provides various other ways to create secrets.
Above we created a secret of type `generic`, and we used the `--from-literal` option.

To read more about the other built in Secret types (`generic`, `docker-registry` 
and `tls`).

```
$ kubectl create secret --help
...

$ kubectl create secret generic --help
...

$ kubectl create secret tls --help
...

$ kubectl create secret docker-registry --help
...
```
 
(we may add anothr lab on some of those other types and options)


# Playground

https://kubernetes.io/docs/tutorials/configuration/configure-java-microservice/configure-java-microservice-interactive/
